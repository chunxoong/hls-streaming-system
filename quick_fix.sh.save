#!/bin/bash
echo "🚨 QUICK FIX - Sửa lỗi HLS4U Stream ngay lập tức"

# Stop service first
echo "⏸️  Stopping service..."
pm2 stop hls4u-stream

# 1. Fix Redis
echo "🔧 Step 1: Fixing Redis..."
sudo systemctl start redis-server
sudo systemctl enable redis-server

# Check Redis
if redis-cli ping 2>/dev/null | grep -q "PONG"; then
    echo "✅ Redis is running"
else
    echo "❌ Redis failed - installing..."
    sudo apt update -qq
    sudo apt install -y redis-server
    sudo systemctl start redis-server
    sudo systemctl enable redis-server
fi

# 2. Quick patch server.js
echo "🔧 Step 2: Patching server.js..."

# Backup
cp server.js server.js.backup.$(date +%Y%m%d_%H%M%S)

# Apply quick fixes to existing server.js
sed -i '1a // QUICK FIXES APPLIED' server.js

# Add trust proxy after express initialization
sed -i '/const app = express();/a app.set("trust proxy", 1);' server.js

# Fix database pool configuration (remove problematic options)
cat > temp_db_fix.js << 'EOF'
const mysql = require('mysql2/promise');

// FIXED Database pool - Remove problematic options
const dbPool = mysql.createPool({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 15,
  queueLimit: 0
  // Removed: acquireTimeout, timeout, maxReusedConnections
});
EOF

# Replace database configuration
awk '
/const dbPool = mysql.createPool\({/ {
    print "// FIXED Database pool - Remove problematic options"
    print "const dbPool = mysql.createPool({"
    print "  host: process.env.DB_HOST || '\''localhost'\'',"
    print "  user: process.env.DB_USER,"
    print "  password: process.env.DB_PASSWORD,"
    print "  database: process.env.DB_NAME,"
    print "  waitForConnections: true,"
    print "  connectionLimit: 15,"
    print "  queueLimit: 0"
    print "  // Removed: acquireTimeout, timeout, maxReusedConnections"
    print "});"
    skip=1
    next
}
skip && /^\};/ {
    skip=0
    next
}
skip { next }
{ print }
' server.js > server.js.tmp && mv server.js.tmp server.js

# Fix CORS configuration
awk '
/app\.use\(cors\(\{/ {
    print "// FIXED CORS configuration"
    print "app.use(cors({"
    print "  origin: function (origin, callback) {"
    print "    // Allow requests with no origin (mobile apps, etc.)"
    print "    if (!origin) return callback(null, true);"
    print "    // Allow all origins for now (can be restricted later)"
    print "    return callback(null, true);"
    print "  },"
    print "  credentials: true,"
    print "  methods: ['\''GET'\'', '\''POST'\'', '\''PUT'\'', '\''DELETE'\'', '\''OPTIONS'\''],"
    print "  allowedHeaders: ['\''Content-Type'\'', '\''Authorization'\'', '\''X-Requested-With'\'']"
    print "}));"
    skip=1
    next
}
skip && /^\}\)\);/ {
    skip=0
    next
}
skip { next }
{ print }
' server.js > server.js.tmp && mv server.js.tmp server.js

# 3. Add Redis fallback improvement
echo "🔧 Step 3: Improving Redis fallback..."

# Create a simple Redis check and fallback
cat > redis_check.js << 'EOF'
// Quick Redis check and fallback
const checkRedis = async () => {
  try {
    const { createClient } = require('redis');
    const client = createClient({ socket: { connectTimeout: 3000 } });
    await client.connect();
    await client.ping();
    await client.quit();
    console.log('✅ Redis is available');
    return true;
  } catch (error) {
    console.log('⚠️  Redis not available, using Memory store');
    return false;
  }
};
EOF

# 4. Create improved server startup
echo "🔧 Step 4: Creating startup check..."

cat > startup_check.js << 'EOF'
// Startup health check
const startupCheck = async () => {
  console.log('🔍 Running startup checks...');
  
  // Check Redis
  try {
    const { createClient } = require('redis');
    const client = createClient({ 
      socket: { 
        host: 'localhost',
        port: 6379,
        connectTimeout: 2000 
      }
    });
    await client.connect();
    const result = await client.ping();
    await client.quit();
    console.log('✅ Redis: OK');
  } catch (error) {
    console.log('⚠️  Redis: Not available (will use memory store)');
  }
  
  // Check Database
  try {
    const mysql = require('mysql2/promise');
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME
    });
    await connection.ping();
    await connection.end();
    console.log('✅ Database: OK');
  } catch (error) {
    console.log('❌ Database: Error -', error.message);
  }
  
  console.log('🚀 Starting server...\n');
};

// Run startup check
startupCheck().catch(console.error);
EOF

# 5. Quick environment check
echo "🔧 Step 5: Environment check..."

# Check .env file
if [ ! -f .env ]; then
    echo "⚠️  .env file not found, creating basic one..."
    cat > .env << 'EOF'
# Database
DB_HOST=localhost
DB_USER=hls4u-stream
DB_PASSWORD=N72kySNBgREd9nNCnu3m
DB_NAME=hls4u-stream

# Session
SESSION_SECRET=hls4u-secret-key-2024-production

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379

# Server
PORT=3000
NODE_ENV=production
EOF
fi

# 6. Clear logs and restart
echo "🔧 Step 6: Clearing logs and restarting..."

# Clear PM2 logs
pm2 flush

# Create logs directory if not exists
mkdir -p logs

# Start with better error handling
echo "🚀 Starting server..."
pm2 start ecosystem.config.js

# Wait a moment
sleep 3

# Check status
echo "📊 Checking status..."
pm2 status

# Show recent logs
echo "📝 Recent logs:"
pm2 logs hls4u-stream --lines 10

echo ""
echo "✅ QUICK FIX COMPLETE!"
echo ""
echo "🔍 To monitor:"
echo "   pm2 logs hls4u-stream"
echo ""
echo "🌐 To test:"
echo "   curl http://127.0.0.1:3000/health"
echo ""
echo "🔧 If still issues:"
echo "   pm2 restart hls4u-stream"
echo "   pm2 logs hls4u-stream --lines 50"

# Clean up temp files
rm -f temp_db
